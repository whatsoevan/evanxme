<button id="themeToggle" class="prose dark:prose-invert hover:opacity-50">
  <svg xmlns="http://www.w3.org/2000/svg" width="24px" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
    <!-- Sun Icon -->
    <g class="sun">
      <circle cx="12" cy="12" r="4"/>
      <path d="M12 2v2"/>
      <path d="M12 20v2"/>
      <path d="m4.93 4.93 1.41 1.41"/>
      <path d="m17.66 17.66 1.41 1.41"/>
      <path d="M2 12h2"/>
      <path d="M20 12h2"/>
      <path d="m6.34 17.66-1.41 1.41"/>
      <path d="m19.07 4.93-1.41 1.41"/>
    </g>
    <!-- Moon Icon -->
    <g class="moon stroke-current">
      <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"/>
    </g>
  </svg>
</button>

<style>
  #themeToggle {
    border: 0;
    background: none;
    cursor: pointer;
  }
  .sun {
    display: block;
    stroke-width: 2;
  }
  .moon {
    display: none;
    stroke-width: 2;
  }
  :root.dark .sun {
    display: none;
  }
  :root.dark .moon {
    display: block;
  }
</style>

<script>
  // Initialize theme on page load
  const initializeTheme = () => {
    // Only initialize if theme hasn't been set yet
    if (document.documentElement.classList.contains("dark") || 
        document.documentElement.classList.contains("light")) {
      return; // Theme already set, don't override
    }
    
    // Check if user has manually set a preference
    const savedTheme = localStorage.getItem("theme");
    
    if (savedTheme) {
      // User has manually set a preference, use it
      document.documentElement.classList.toggle("dark", savedTheme === "dark");
    } else {
      // No manual preference, follow system preference
      const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
      document.documentElement.classList.toggle("dark", prefersDark);
      // Don't save to localStorage yet - wait for manual toggle
    }
  };

  // Handle theme toggle
  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    // Save manual preference to localStorage
    localStorage.setItem("theme", isDark ? "dark" : "light");
  };

  // Set up event listener with proper cleanup for View Transitions
  const setupThemeToggle = () => {
    const themeToggle = document.getElementById("themeToggle");
    if (themeToggle) {
      // Remove any existing listeners to prevent duplicates
      themeToggle.removeEventListener("click", handleToggleClick);
      // Add the new listener
      themeToggle.addEventListener("click", handleToggleClick);
    }
  };

  // Initialize theme and setup toggle
  initializeTheme();
  setupThemeToggle();

  // Re-setup after View Transitions (when DOM is replaced)
  document.addEventListener("astro:page-load", () => {
    // Don't re-initialize theme on page transitions, just setup the toggle
    setupThemeToggle();
  });

  // Reapply theme after View Transitions swap
  document.addEventListener("astro:after-swap", () => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      document.documentElement.classList.toggle('dark', savedTheme === 'dark');
    } else {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      document.documentElement.classList.toggle('dark', prefersDark);
    }
    setupThemeToggle();
  });

  // Also setup on DOMContentLoaded as fallback
  document.addEventListener("DOMContentLoaded", () => {
    setupThemeToggle();
  });
</script>

